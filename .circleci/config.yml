version: 2.1
setup: true
orbs:
  orb-tools: circleci/orb-tools@12.0.3
  node: circleci/node@5.1.0

defaults: &defaults
  docker:
    - image: cimg/base:current
  working_directory: ~/repo

commands:
  install_cci_cli:
    description: Install the latest CircleCI CLI
    steps:
      - run:
          name: Install CCI CLI
          command: |
            sudo curl -fLSs https://circle.ci/cli | sudo bash
            # this succesfully installs the new cci CLI to /usr/local/bin/circleci
            # however, the orig (/usr/bin/circleci) remains in the path
            # so need to use the full path to circleci
  
            which /usr/local/bin/circleci
            /usr/local/bin/circleci version
            /usr/local/bin/circleci

  untar_orb:
    description: Untar the orb
    steps:
      - run:
          name: Untar Orb
          command: |
            TMP_SRC_DIR=$(mktemp -d)
            ORB_DIR=packed
            tar -xzf "orb_source.tar.gz" -C "${TMP_SRC_DIR}"
            mkdir -p "${ORB_DIR}"
            mv "${TMP_SRC_DIR}/"* "${ORB_DIR}/"
            rm -rf "${TMP_SRC_DIR}"

  semantic_release_dry_run:
    description: Run semantic-release in --dry-run mode to capture info about next release version
    steps:
      - run:
          name: Run semantic release in dry-run mode
          command: |
            npx -p @semantic-release/git@10.0.1 -p semantic-release@21.0.2 semantic-release --branches ${CIRCLE_BRANCH} --dry-run

  check_node:
    description: Check node environment
    steps:
      - run:
          name: Check Node environment
          command: |
            echo node version: $(node --version)
            echo npx version: $(npx --version)

jobs:
  # This deploys a dev version
  deploy-to-dev:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - node/install
      - check_node
      - semantic_release_dry_run
      - install_cci_cli
      - untar_orb
      - run:
          name: Deploy dev version of Orb
          command: |
            dev_orb_ref="snyk/snyk@dev:${CIRCLE_BRANCH}"
            echo "dev_orb_ref: ${dev_orb_ref}"
            ls -Rl 
            /usr/local/bin/circleci orb publish packed/orb.yml $dev_orb_ref --token ${CIRCLE_TOKEN}

  # This deploys a prod version with the REPLACE_ORB_VERSION rendered in the actualy Orb yaml
  # and uses semantic-release to handle the versioning.
  # It bases the new version of the latest git tag and the usual fix/feat/chore commit message prefixes
  # and will set a new tag in the repo.
  prod-release:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: See files after attach_workspace
          command: |
            ls -la
      - node/install
      - check_node
      - install_cci_cli
      - untar_orb
      - run:
          name: See the packed Orb # make sure it's here because of the attach_workspace
          command: |
            cat packed/orb.yml
      - run:
          name: Add github.com to known_hosts # Because without this sometime you get errors connecting to GitHub (for writing the tag)
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com > ~/.ssh/known_hosts
      - semantic_release_dry_run
      - run:
          name: Update Version and Release
          command: |
            if grep "The next release version is" sem-rel-dry-run.txt
            then
              echo "Do release"
              next_version=$(cat sem-rel-dry-run.txt | grep "The next release version is" | sed -n -e 's/^.*is //p')
              echo "next_version: ${next_version}"              

              sed -i "s|REPLACE_ORB_VERSION|${next_version}|g" packed/orb.yml
              echo "modified packed yaml file:"
              cat packed/orb.yml

              prod_orb_ref="snyk/snyk@${next_version}"
              echo "prod_orb_ref: ${prod_orb_ref}"

              # Set tag in GitHub
              npx -p @semantic-release/git@10.0.1 -p semantic-release@21.0.2 semantic-release --branches ${CIRCLE_BRANCH}

              # publish production version (needs different token)
              /usr/local/bin/circleci orb publish packed/orb.yml $prod_orb_ref --token ${CIRCLE_TOKEN}

            else
              echo "Don't do release"
            fi

workflows:
  btd:
    jobs:
      - orb-tools/pack:
          orb_dir: packed
          orb_file_name: orb.yml
      - orb-tools/continue:
          requires:
            - orb-tools/pack
          orb_name: snyk
          orb_dir: packed
          orb_file_name: orb.yml
          pipeline_number: << pipeline.number >>
          vcs_type: github
          filters:
            branches:
              ignore: master
      - deploy-to-dev:
          context:
            - orb-publishing
          requires:
            - orb-tools/continue
          filters:
            branches:
              ignore: master

      - prod-release:
          context:
            - nodejs-lib-release
            - orb-publishing
          requires:
            - orb-tools/pack
          filters:
            branches:
              only: master
