version: 2.1
orbs:
  node: circleci/node@7.1.0

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

commands:
  scan:
    description: Test the scan functionality
    parameters:
      os:
        type: string
        default: 'linux'
      fail-on-issues:
        type: boolean
        default: false
      monitor-on-build:
        type: boolean
        default: false
      no-cache:
        type: boolean
        default: false
      additional-arguments:
        type: string
        default: ''
      additional-monitor-arguments:
        type: string
        default: ''

      test-only-param_fail-on-no-cache-used:
        type: boolean
        default: false
      test-only-param_dry-run-commands:
        type: boolean
        default: false

    steps:
        - node/install

        - run:
            name: Setup test repository
            command: |
              git clone https://github.com/snyk-labs/nodejs-goof || echo "Repository already exists, no cloning needed."
              cd nodejs-goof
              npm install

        - snyk/scan:
            target-file: nodejs-goof/package.json

            os: << parameters.os >>
            fail-on-issues: << parameters.fail-on-issues >>
            monitor-on-build: << parameters.monitor-on-build >>
            no-cache: << parameters.no-cache >>
            additional-arguments: << parameters.additional-arguments >>
            additional-monitor-arguments: << parameters.additional-monitor-arguments >>

            test-only-param_fail-on-no-cache-used: << parameters.test-only-param_fail-on-no-cache-used >>
            test-only-param_dry-run-commands: << parameters.test-only-param_dry-run-commands >>

  container-scan:
    description: Test the scan functionality on containers
    parameters:
      fail-on-issues:
        type: boolean
        default: false
      monitor-on-build:
        type: boolean
        default: false
      no-cache:
        type: boolean
        default: false
      additional-arguments:
        type: string
        default: ''
      additional-monitor-arguments:
        type: string
        default: ''

      test-only-param_fail-on-no-cache-used:
        type: boolean
        default: false
      test-only-param_dry-run-commands:
        type: boolean
        default: false

    steps:
      - setup_remote_docker

      - run:
          name: Setup test repository
          command: |
            git clone https://github.com/snyk-labs/nodejs-goof || echo "Repository already exists, no cloning needed."
            cd nodejs-goof
            docker build -t nodejs-goof .

      - snyk/scan:
          docker-image-name: nodejs-goof
          command: container test
          monitor-command: container monitor

          fail-on-issues: << parameters.fail-on-issues >>
          monitor-on-build: << parameters.monitor-on-build >>
          no-cache: << parameters.no-cache >>
          additional-arguments: << parameters.additional-arguments >>
          additional-monitor-arguments: << parameters.additional-monitor-arguments >>

          test-only-param_fail-on-no-cache-used: << parameters.test-only-param_fail-on-no-cache-used >>
          test-only-param_dry-run-commands: << parameters.test-only-param_dry-run-commands >>

  validate-dry-run-commands:
    description: Validation hook to test the output of commands run under dry-run mode
    parameters:
      expected-commands:
        type: string
    steps:
      - run:
          name: Compare expected commands
          command: >
            if [[ "$(cat /tmp/dry-run-snyk-commands.txt)" != "$(printf "<< parameters.expected-commands >>")" ]]; then
              echo "Expected Commands ========================================"
              printf "<< parameters.expected-commands >>"

              echo "Actual Commands =========================================="
              cat /tmp/dry-run-snyk-commands.txt

              false
            fi

jobs:
  scan-test:
    docker:
      - image: cimg/base:current
    steps:
      - scan

  scan-test-ensure-cache-used:
    docker:
      - image: cimg/base:current
    steps:
      - scan
      - scan:
          test-only-param_fail-on-no-cache-used: true
          no-cache: false

  scan-test-old-curl:
    docker:
      - image: cimg/base:2022.04
    steps:
      - scan

  scan-test-no-cache:
    docker:
      - image: cimg/base:current
    steps:
      - scan:
          no-cache: true

  scan-test-old-curl-no-cache:
    docker:
      - image: cimg/base:2022.04
    steps:
      - scan:
          no-cache: true

  scan-test-os-specified:
    docker:
      - image: cimg/base:current
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - when:
          condition:
            equal: [ arm.medium, << parameters.resource_class >> ]
          steps:
            - scan:
                os: "linux-arm64"
      - when:
          condition:
            equal: [ medium, << parameters.resource_class >> ]
          steps:
            - scan:
                os: "linux"

  scan-test-monitor-additional-arguments:
    docker:
      - image: cimg/base:current
    steps:
      - scan:
          test-only-param_dry-run-commands: true
          additional-arguments: "--print-deps"
          additional-monitor-arguments: "--project-tags=component=pkg:github.com/snyk-labs/nodejs-goof"
          monitor-on-build: true
      - validate-dry-run-commands:
          expected-commands: |
            snyk test --severity-threshold=low --file=nodejs-goof/package.json --print-deps
            snyk monitor --file=nodejs-goof/package.json --print-deps --project-tags=component=pkg:github.com/snyk-labs/nodejs-goof

  scan-container-test-and-monitor:
    docker:
      - image: cimg/base:current
    steps:
      - container-scan:
          test-only-param_dry-run-commands: true
          monitor-on-build: true
      - validate-dry-run-commands:
          expected-commands: |
            snyk container test --docker nodejs-goof --severity-threshold=low
            snyk container monitor --docker nodejs-goof

workflows:
  test-deploy:
    jobs:
      - scan-test:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-old-curl:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-no-cache:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-os-specified:
          matrix:
            parameters:
              resource_class: ["medium", "arm.medium"]
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-old-curl-no-cache:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-ensure-cache-used:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-test-monitor-additional-arguments:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters

      - scan-container-test-and-monitor:
          context:
            - devex_cli_testing-snyk-orb-snyk-creds
          filters: *filters
