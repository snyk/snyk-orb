description: Scan the application dependencies for known vulnerabilities with Snyk. This command calls the others, and should be used as the command for scanning.
parameters:
  command:
    description: >
      The Snyk command to call, i.e. "test" or "iac test"
    type: string
    default: "test"
  monitor-command:
    description: >
      The Snyk monitoring command to call, i.e. "monitor" or "container monitor"
    type: string
    default: "monitor"
  token-variable:
    description: >
      Name of env var containing your Snyk API token. Pass this as a raw string such as CICD_SNYK_TOKEN.
      Do not paste the actual token into your configuration.
      If omitted it's assumed the CLI has already been setup with a valid token beforehand.
    type: env_var_name
    default: SNYK_TOKEN
  severity-threshold:
    description: Only report vulnerabilities of provided level or higher (low/medium/high/critical). Default is low.
    type: enum
    enum: ["low", "medium", "high", "critical"]
    default: "low"
  fail-on-issues:
    description: This specifies if builds should be failed or continued based on issues found by Snyk.
    type: boolean
    default: true
  monitor-on-build:
    description: Take a current application dependencies snapshot for continuous monitoring by Snyk, if test was succesful.
    type: boolean
    default: true
  target-file:
    description: The path to the manifest file to be used by Snyk. Should be provided if non-standard.
    type: string
    default: ""
  docker-image-name:
    description: The image name, if scanning a container image
    type: string
    default: ""
  organization:
    description: >
      Name of the Snyk organisation name, under which this project should be tested and monitored
      If omitted the default organization will be used.
    type: string
    default: ""
  project:
    description: >
      A custom name for the Snyk project to be created on snyk.io.
      If omitted a default-generated project name will be used.
    type: string
    default: ""
  cli-version:
    description: >
      The version of the Snyk CLI you are using.
    type: string
    default: ""
  additional-arguments:
    description: Refer to the Snyk CLI help page for information on additional arguments.
    type: string
    default: ""
  additional-monitor-arguments:
    description: Refer to the Snyk CLI help page for information on additional arguments. These are passed only to the `snyk monitor` command.
    type: string
    default: ""
  no-cache:
    description: >
      Disable caching the Snyk CLI
    type: boolean
    default: false
  os:
    description: The CLI OS version to download
    type: enum
    enum: ["linux", "macos", "alpine", "linux-arm64", "macos-arm64"]
    default: "linux"
  install-alpine-dependencies:
    description: Install additional dependencies required by the alpine cli
    type: boolean
    default: true
  no-output-timeout:
    description: Elapsed time the command can run without output. The default is 10 minutes.
    type: string
    default: "10m"
  test-only-param_fail-on-no-cache-used:
    description: >
      This parameter is used to test the no-cache functionality.
      It should not be used in production.
    type: boolean
    default: false
  test-only-param_dry-run-commands:
    description: >
      This parameter is used to test arguments provided to the snyk commands.
      It should not be used in production.
    type: boolean
    default: false
steps:
  # install snyk
  - install:
      cli-version: <<parameters.cli-version>>
      os: <<parameters.os>>
      install-alpine-dependencies: <<parameters.install-alpine-dependencies>>
      token-variable: <<parameters.token-variable>>
      no-cache: <<parameters.no-cache>>
      test-only-param_fail-on-no-cache-used: <<parameters.test-only-param_fail-on-no-cache-used>>
  # snyk test
  - run:
      name: "Run Snyk"
      environment:
        SNYK_INTEGRATION_NAME: CIRCLECI_ORB
        SNYK_INTEGRATION_VERSION: REPLACE_ORB_VERSION
      command: >
        <<#parameters.test-only-param_dry-run-commands>>function capture() { echo "$@" | tee -a /tmp/dry-run-snyk-commands.txt; }; capture<</parameters.test-only-param_dry-run-commands>>
        snyk <<parameters.command>>
        <<#parameters.docker-image-name>>--docker <<parameters.docker-image-name>><</parameters.docker-image-name>>
        <<#parameters.severity-threshold>>--severity-threshold=<<parameters.severity-threshold>><</parameters.severity-threshold>>
        <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
        <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
        <<parameters.additional-arguments>>
        <<^parameters.fail-on-issues>> || true<</parameters.fail-on-issues>>
      no_output_timeout: "<<parameters.no-output-timeout>>"
  # snyk monitor
  - when:
      condition: <<parameters.monitor-on-build>>
      steps:
        - run:
            name: "Run Snyk monitor for continuous monitoring on snyk.io"
            environment:
              SNYK_INTEGRATION_NAME: CIRCLECI_ORB
              SNYK_INTEGRATION_VERSION: REPLACE_ORB_VERSION
            command: >
              <<#parameters.test-only-param_dry-run-commands>>function capture() { echo "$@" | tee -a /tmp/dry-run-snyk-commands.txt; }; capture<</parameters.test-only-param_dry-run-commands>>
              snyk <<parameters.monitor-command>>
              <<#parameters.docker-image-name>>--docker <<parameters.docker-image-name>><</parameters.docker-image-name>>
              <<#parameters.project>>--project-name=<<parameters.project>><</parameters.project>>
              <<#parameters.organization>>--org=<<parameters.organization>><</parameters.organization>>
              <<#parameters.target-file>>--file=<<parameters.target-file>><</parameters.target-file>>
              <<parameters.additional-arguments>>
              <<parameters.additional-monitor-arguments>>
            no_output_timeout: "<<parameters.no-output-timeout>>"
